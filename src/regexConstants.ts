/**
 * @file regexConstants.ts
 * @description Provides constant data for the interactive RegexModal, including a list of
 * common regex templates and a structured cheatsheet for building patterns.
 */

/**
 * A list of common regular expression templates for quick use.
 */
export const regexTemplates = [
    { "name": "Email Address", "value": "[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+" },
    { "name": "Username (Basic)", "value": "[a-zA-Z0-9_-]{3,16}" },
    { "name": "Username (Alphanumeric)", "value": "[a-zA-Z0-9]+" },
    { "name": "Password (Moderate)", "value": "(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+){8,}" },
    { "name": "Password (Strong)", "value": "(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[^A-Za-z0-9])(?=.{8,})" },
    { "name": "Password (Letters & Numbers)", "value": "(?=.*[a-zA-Z])(?=.*[0-9])[A-Za-z0-9]+" },
    { "name": "URL (HTTP/HTTPS)", "value": "https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)" },
    { "name": "URL (All Protocols)", "value": "(ftp|http|https):\\/\\/[^ \"]+" },
    { "name": "Slug (for URLs)", "value": "[a-z0-9-]+" },
    { "name": "HTML Tag", "value": "<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)" },
    { "name": "HTML Tag (Opening)", "value": "<([a-zA-Z0-9]+)\\s*[^>]*>" },
    { "name": "HTML Tag (Closing)", "value": "<\\/([a-zA-Z0-9]+)>" },
    { "name": "HTML Comment", "value": "" },
    { "name": "Markdown Link", "value": "\\[(.*?)\\]\\((.*?)\\)" },
    { "name": "Image File", "value": "([^\\s]+(\\.(?i)(jpg|png|gif|bmp))$)" },
    { "name": "Audio File", "value": "([^\\s]+(\\.(?i)(mp3|wav|ogg|flac))$)" },
    { "name": "Video File", "value": "([^\\s]+(\\.(?i)(mp4|avi|mov|mkv))$)" },
    { "name": "Document File", "value": "(\\w+).(pdf|docx?|xlsx?|pptx?|odt|rtf|txt)" },
    { "name": "File Path (Unix)", "value": "\\/([a-zA-Z0-9_.-]+\\/)*[a-zA-Z0-9_.-]+" },
    { "name": "File Path (Windows)", "value": "[a-zA-Z]:\\\\(((?![<>:\"/\\\\|?*]).)+((?<![ .])\\\\)?)*" },
    { "name": "File Path (Linux)", "value": "\\/([a-zA-Z0-9_.-]+\\/?)*" },
    { "name": "Hashtag (#tag)", "value": "(?:^|\\s)#(\\w+)" },
    { "name": "Mention (@user)", "value": "(?:^|\\s)@(\\w+)" },
    { "name": "Empty Line", "value": "\\s*" },
    { "name": "Trim Leading Whitespace", "value": "\\s+" },
    { "name": "Trim Trailing Whitespace", "value": "\\s+" },
    { "name": "Trim All Whitespace", "value": "\\s" },
    { "name": "Duplicate Words", "value": "\\b(\\w+)\\s+\\1\\b" },
    { "name": "Words Containing 'cat'", "value": "\\b\\w*cat\\w*\\b" },
    { "name": "Sentence", "value": "([^.!?]*[.!?])" },
    { "name": "Title Case Words", "value": "\\b[A-Z][a-z]*\\b" },
    { "name": "All Caps Word", "value": "\\b[A-Z]{2,}\\b" },
    { "name": "Integer", "value": "-?\\d+" },
    { "name": "Positive Integer", "value": "\\d+" },
    { "name": "Negative Integer", "value": "-\\d+" },
    { "name": "Decimal Number", "value": "-?\\d*\\.\\d+" },
    { "name": "Positive Decimal", "value": "\\d*\\.\\d+" },
    { "name": "Negative Decimal", "value": "-\\d*\\.\\d+" },
    { "name": "Number (Integer or Decimal)", "value": "-?\\d+(\\.\\d+)?" },
    { "name": "Number with Comma Separators", "value": "-?\\d{1,3}(,\\d{3})*(\\.\\d+)?" },
    { "name": "Scientific Notation", "value": "[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?" },
    { "name": "Even Number", "value": "\\b\\d*[02468]\\b" },
    { "name": "Odd Number", "value": "\\b\\d*[13579]\\b" },
    { "name": "Roman Numerals", "value": "(?=[MDCLXVI])M*(C[MD]|D?C{0,3})(X[CL]|L?X{0,3})(I[XV]|V?I{0,3})" },
    { "name": "Hex Color Code", "value": "#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})" },
    { "name": "IP Address (IPv4)", "value": "((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)" },
    { "name": "IP Address (IPv6)", "value": "([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])" },
    { "name": "MAC Address", "value": "([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})" },
    { "name": "UUID", "value": "[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}" },
    { "name": "GUID", "value": "\\{?[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\\}?" },
    { "name": "ISBN (10 or 13)", "value": "(?:ISBN(?:-1[03])?:? )?(?=[0-9X]{10}$|(?=(?:[0-9]+[- ]){3})[- 0-9X]{13}$|97[89][0-9]{10}$|(?=(?:[0-9]+[- ]){4})[- 0-9]{17}$)(?:97[89][- ]?)?[0-9]{1,5}[- ]?[0-9]+[- ]?[0-9]+[- ]?[0-9X]" },
    { "name": "Credit Card (Visa)", "value": "4[0-9]{12}(?:[0-9]{3})?" },
    { "name": "Credit Card (Mastercard)", "value": "5[1-5][0-9]{14}" },
    { "name": "Credit Card (American Express)", "value": "3[47][0-9]{13}" },
    { "name": "Credit Card (Discover)", "value": "6(?:011|5[0-9]{2})[0-9]{12}" },
    { "name": "Credit Card (Diners Club)", "value": "3(?:0[0-5]|[68][0-9])[0-9]{11}" },
    { "name": "Credit Card (JCB)", "value": "(?:2131|1800|35\\d{3})\\d{11}" },
    { "name": "Credit Card (General)", "value": "(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})" },
    { "name": "Bitcoin Address", "value": "[13][a-km-zA-HJ-NP-Z1-9]{25,34}" },
    { "name": "Ethereum Address", "value": "0x[a-fA-F0-9]{40}" },
    { "name": "Date (YYYY-MM-DD)", "value": "\\d{4}-\\d{2}-\\d{2}" },
    { "name": "Date (MM/DD/YYYY)", "value": "(0[1-9]|1[0-2])\\/(0[1-9]|[12][0-9]|3[01])\\/(19|20)\\d{2}" },
    { "name": "Date (DD-MM-YYYY)", "value": "(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[0-2])-\\d{4}" },
    { "name": "Date (Full Month Name)", "value": "\\b(January|February|March|April|May|June|July|August|September|October|November|December)\\s\\d{1,2},\\s\\d{4}\\b" },
    { "name": "Time (12-hour)", "value": "(1[0-2]|0?[1-9]):[0-5][0-9] ?([APap][Mm])" },
    { "name": "Time (24-hour)", "value": "([01]?[0-9]|2[0-3]):[0-5][0-9]" },
    { "name": "Time with Seconds (24-hour)", "value": "([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]" },
    { "name": "Unix Timestamp", "value": "\\b\\d{10}\\b" },
    { "name": "ISO 8601 Date/Time", "value": "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[+-]\\d{2}:\\d{2})" },
    { "name": "Time Zone Offset", "value": "([+-])(0[0-9]|1[0-2]):(00|30|45)" },
    { "name": "Phone Number (U.S.)", "value": "(\\+?1\\s?)?(\\d{3}|\\(\\d{3}\\))[\\s\\-]?(\\d{3})[\\s\\-]?(\\d{4})" },
    { "name": "Phone Number (UK)", "value": "(\\+44\\s?7\\d{3}|\\(?07\\d{3}\\)?)\\s?\\d{3}\\s?\\d{3}" },
    { "name": "Phone Number (France)", "value": "(?:(?:\\+|00)33[\\s.-]{0,3}(?:\\(0\\)[\\s.-]{0,3})?|0)[1-9](?:(?:[\\s.-]?\\d{2}){4}|\\d{2}(?:[\\s.-]?\\d{3}){2})" },
    { "name": "Phone Number (Germany)", "value": "(\\+49|0)[1-9][0-9]{1,4}[ -]?[0-9]{3,8}" },
    { "name": "Phone Number (India)", "value": "(\\+91[\\-\\s]?)?[0]?[789]\\d{9}" },
    { "name": "Zip Code (U.S.)", "value": "\\d{5}(-\\d{4})?" },
    { "name": "Zip Code (U.S. 5-digit)", "value": "\\d{5}" },
    { "name": "Postal Code (Canada)", "value": "[A-Za-z]\\d[A-Za-z][ -]?\\d[A-Za-z]\\d" },
    { "name": "Postal Code (UK)", "value": "[A-Z]{1,2}[0-9R][0-9A-Z]? [0-9][ABD-HJLNP-UW-Z]{2}" },
    { "name": "SSN (U.S. Social Security)", "value": "(?!000|666)[0-8][0-9]{2}-(?!00)[0-9]{2}-(?!0000)[0-9]{4}" },
    { "name": "URL Domain TLD (.com, .net, etc)", "value": "(?<=\\.)[a-zA-Z]{2,6}" },
    { "name": "URL Query String", "value": "\\?([^#]+)" },
    { "name": "URL Fragment", "value": "#([^\\s]+)" },
    { "name": "JSON Key", "value": "\"([a-zA-Z0-9_]+)\"\\s*:" },
    { "name": "JSON Value (String)", "value": "\"([^\"]*)\"" },
    { "name": "JSON Value (Number)", "value": "-?\\d+(\\.\\d+)?" },
    { "name": "JSON Value (Boolean)", "value": "(true|false)" },
    { "name": "JSON Value (Null)", "value": "(null)" },
    { "name": "CSV Line", "value": "\"?([^\",]+)\"?(?:,|$)" },
    { "name": "CSV Header", "value": "\"?([^\",]+)\"?(?:,|$)" },
    { "name": "CSV Cell", "value": "\"?([^\",]*)\"?(?:,|$)" },
    { "name": "XML Tag", "value": "<([a-zA-Z0-9_:-]+)([^>]*)>(.*?)<\\/\\1>" },
    { "name": "XML Attribute", "value": "(\\w+)=\"([^\"]*)\"" },
    { "name": "XML Self-Closing Tag", "value": "<([a-zA-Z0-9_:-]+)([^>]*)\\s*\\/?>" },
    { "name": "XML Comment", "value": "<!--(.*?)-->" },
    { "name": "YAML Key-Value Pair", "value": "(\\w+):\\s*(.*)" },
    { "name": "YAML List Item", "value": "-\\s*(.*)" },
    { "name": "YAML Block Scalar", "value": "\\|-(.*?)(?=\\n\\S|$)" },
    { "name": "Any Word Character", "value": "\\w" },
    { "name": "Any Non-Word Character", "value": "\\W" },
    { "name": "Any Digit", "value": "\\d" },
    { "name": "Any Non-Digit", "value": "\\D" },
    { "name": "Any Whitespace", "value": "\\s" },
    { "name": "Any Non-Whitespace", "value": "\\S" },
    { "name": "Starts With", "value": "^" },
    { "name": "Ends With", "value": "$" },
    { "name": "Any Character (except newline)", "value": "." },
    { "name": "Match 'a' or 'b'", "value": "a|b" },
    { "name": "Zero or More", "value": "*" },
    { "name": "One or More", "value": "+" },
    { "name": "Zero or One", "value": "?" },
    { "name": "Exactly n times", "value": "{n}" },
    { "name": "n or more times", "value": "{n,}" },
    { "name": "Between n and m times", "value": "{n,m}" },
    { "name": "Capture Group", "value": "(...)" },
    { "name": "Non-Capturing Group", "value": "(?:...)" },
    { "name": "Positive Lookahead", "value": "(?=...)" },
    { "name": "Negative Lookahead", "value": "(?!...)" },
    { "name": "Positive Lookbehind", "value": "(?<=...)" },
    { "name": "Negative Lookbehind", "value": "(?<!...)" },
    { "name": "Word Boundary", "value": "\\b" },
    { "name": "Non-Word Boundary", "value": "\\B" },
    { "name": "Alphanumeric Characters", "value": "[a-zA-Z0-9]" },
    { "name": "Alphabetic Characters", "value": "[a-zA-Z]" },
    { "name": "Numeric Characters", "value": "[0-9]" },
    { "name": "Lowercase Letters", "value": "[a-z]" },
    { "name": "Uppercase Letters", "value": "[A-Z]" },
    { "name": "Vowels", "value": "[aeiouAEIOU]" },
    { "name": "Consonants", "value": "[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]" },
    { "name": "Punctuation", "value": "[.,!?;:]" },
    { "name": "Quoted String (Single)", "value": "'[^']*'" },
    { "name": "Quoted String (Double)", "value": "\"[^\"]*\"" },
    { "name": "Greedy Match (e.g., `<a>.*</a>`)", "value": ".*" },
    { "name": "Lazy Match (e.g., `<a>.*?</a>`)", "value": ".*?" },
    { "name": "Atomic Group", "value": "(?>...)" },
    { "name": "Backspace", "value": "[\\b]" },
    { "name": "Tab Character", "value": "\\t" },
    { "name": "New Line", "value": "\\n" },
    { "name": "Carriage Return", "value": "\\r" },
    { "name": "JWT Token", "value": "[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+" },
    { "name": "Base64 URL String", "value": "(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?" },
    { "name": "Base64 String", "value": "(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?" },
    { "name": "HTML Entity", "value": "&[a-zA-Z0-9#]+;" },
    { "name": "CSS Class", "value": "\\.[a-zA-Z0-9_-]+" },
    { "name": "CSS ID", "value": "#[a-zA-Z0-9_-]+" },
    { "name": "CSS Selector", "value": "[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)*" },
    { "name": "CSS Property", "value": "[a-zA-Z-]+\\s*:\\s*[^;]+;" },
    { "name": "CSS Value", "value": "[^;]+" },
    { "name": "Currency Amount", "value": "([$|€])(\\d+)[.]?(\\d{2})?" },
];

/**
 * A structured cheatsheet for regular expression syntax, categorized for easy browsing.
 */
export const regexCheatsheet = [
    {
        category: 'Character Classes',
        items: [
            { token: '.', description: 'any character except newline' },
            { token: '\\w', description: 'word character (a-z, A-Z, 0-9, _)' },
            { token: '\\d', description: 'digit (0-9)' },
            { token: '\\s', description: 'whitespace (space, tab, newline)' },
            { token: '\\W', description: 'non-word character' },
            { token: '\\D', description: 'non-digit' },
            { token: '\\S', description: 'non-whitespace' },
            { token: '[abc]', description: 'any of a, b, or c' },
            { token: '[^abc]', description: 'not a, b, or c' },
            { token: '[a-g]', description: 'character between a & g' },
        ]
    },
    {
        category: 'Anchors',
        items: [
            { token: '^', description: 'start of string' },
            { token: '$', description: 'end of string' },
            { token: '\\b', description: 'word boundary' },
            { token: '\\B', description: 'non-word boundary' },
        ]
    },
    {
        category: 'Quantifiers',
        items: [
            { token: 'a?', description: 'zero or one of "a"' },
            { token: 'a*', description: 'zero or more of "a"' },
            { token: 'a+', description: 'one or more of "a"' },
            { token: 'a{3}', description: 'exactly 3 of "a"' },
            { token: 'a{3,}', description: '3 or more of "a"' },
            { token: 'a{3,6}', description: 'between 3 and 6 of "a"' },
        ]
    },
    {
        category: 'Groups & Lookaround',
        items: [
            { token: '(abc)', description: 'capture group' },
            { token: '\\1', description: 'back-reference to group #1' },
            { token: '(?:abc)', description: 'non-capturing group' },
            { token: '(?=abc)', description: 'positive lookahead' },
            { token: '(?!abc)', description: 'negative lookahead' },
        ]
    }
];
