{"version":3,"sources":["../src/eventSimulation.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\nimport type { Identifier } from 'dnd-core'\nimport type { ITestBackend } from 'react-dnd-test-backend'\nimport { act } from 'react-dom/test-utils'\n\n/**\n * Simulates a drag/drop sequence using the Test Backend\n * @param source The source to drag\n * @param target The target to drop to\n * @param backend The test backend instance\n */\nexport function simulateDragDrop(\n\tsource: HandlerIdProvider,\n\ttarget: HandlerIdProvider,\n\tbackend: ITestBackend,\n): void {\n\tconst sourceHandlerId = getHandlerId(source)\n\tconst targetHandlerId = getHandlerId(target)\n\tact(() => {\n\t\tbackend.simulateBeginDrag([sourceHandlerId])\n\t\tbackend.simulateHover([targetHandlerId])\n\t\tbackend.simulateDrop()\n\t\tbackend.simulateEndDrag()\n\t})\n}\n\n/**\n * Simulates a hover sequence using the Test Backend\n * @param source The source draggable\n * @param target The target element\n * @param backend The test backend\n */\nexport function simulateDragHover(\n\tsource: HandlerIdProvider,\n\ttarget: HandlerIdProvider,\n\tbackend: ITestBackend,\n): void {\n\tconst sourceHandlerId = getHandlerId(source)\n\tconst targetHandlerId = getHandlerId(target)\n\tact(() => {\n\t\tbackend.simulateBeginDrag([sourceHandlerId])\n\t\tbackend.simulateHover([targetHandlerId])\n\t})\n}\n\n/**\n * Simulates a hover sequence using the Test Backend\n * @param source The source draggable\n * @param target The target element\n * @param backend The test backend\n */\nexport function simulateDrag(\n\tsource: HandlerIdProvider,\n\tbackend: ITestBackend,\n): void {\n\tconst sourceHandlerId = getHandlerId(source)\n\tact(() => {\n\t\tbackend.simulateBeginDrag([sourceHandlerId])\n\t})\n}\n\nexport function getHandlerId(provider: HandlerIdProvider): Identifier {\n\tif (typeof provider === 'string' || typeof provider === 'symbol') {\n\t\treturn provider\n\t} else if (typeof provider === 'function') {\n\t\treturn provider() as Identifier\n\t} else {\n\t\tthrow new Error('Could not get handlerId from DnD source')\n\t}\n}\nexport type HandlerIdProvider = () => Identifier | null\n"],"names":["act","simulateDragDrop","source","target","backend","sourceHandlerId","getHandlerId","targetHandlerId","simulateBeginDrag","simulateHover","simulateDrop","simulateEndDrag","simulateDragHover","simulateDrag","provider","Error"],"mappings":"AAGA,SAASA,GAAG,QAAQ,sBAAsB,CAAA;AAE1C;;;;;GAKG,CACH,OAAO,SAASC,gBAAgB,CAC/BC,MAAyB,EACzBC,MAAyB,EACzBC,OAAqB,EACd;IACP,MAAMC,eAAe,GAAGC,YAAY,CAACJ,MAAM,CAAC;IAC5C,MAAMK,eAAe,GAAGD,YAAY,CAACH,MAAM,CAAC;IAC5CH,GAAG,CAAC,IAAM;QACTI,OAAO,CAACI,iBAAiB,CAAC;YAACH,eAAe;SAAC,CAAC;QAC5CD,OAAO,CAACK,aAAa,CAAC;YAACF,eAAe;SAAC,CAAC;QACxCH,OAAO,CAACM,YAAY,EAAE;QACtBN,OAAO,CAACO,eAAe,EAAE;KACzB,CAAC;CACF;AAED;;;;;GAKG,CACH,OAAO,SAASC,iBAAiB,CAChCV,MAAyB,EACzBC,MAAyB,EACzBC,OAAqB,EACd;IACP,MAAMC,eAAe,GAAGC,YAAY,CAACJ,MAAM,CAAC;IAC5C,MAAMK,eAAe,GAAGD,YAAY,CAACH,MAAM,CAAC;IAC5CH,GAAG,CAAC,IAAM;QACTI,OAAO,CAACI,iBAAiB,CAAC;YAACH,eAAe;SAAC,CAAC;QAC5CD,OAAO,CAACK,aAAa,CAAC;YAACF,eAAe;SAAC,CAAC;KACxC,CAAC;CACF;AAED;;;;;GAKG,CACH,OAAO,SAASM,YAAY,CAC3BX,MAAyB,EACzBE,OAAqB,EACd;IACP,MAAMC,eAAe,GAAGC,YAAY,CAACJ,MAAM,CAAC;IAC5CF,GAAG,CAAC,IAAM;QACTI,OAAO,CAACI,iBAAiB,CAAC;YAACH,eAAe;SAAC,CAAC;KAC5C,CAAC;CACF;AAED,OAAO,SAASC,YAAY,CAACQ,QAA2B,EAAc;IACrE,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAI,OAAOA,QAAQ,KAAK,QAAQ,EAAE;QACjE,OAAOA,QAAQ,CAAA;KACf,MAAM,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;QAC1C,OAAOA,QAAQ,EAAE,CAAc;KAC/B,MAAM;QACN,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC,CAAA;KAC1D;CACD"}