{"version":3,"sources":["../src/wrappers.tsx"],"sourcesContent":["import type { BackendFactory } from 'dnd-core'\nimport type { ComponentType, Ref } from 'react'\nimport { Component, forwardRef } from 'react'\nimport { DndProvider } from 'react-dnd'\nimport { HTML5Backend } from 'react-dnd-html5-backend'\nimport type { ITestBackend, TestBackendOptions } from 'react-dnd-test-backend'\nimport { TestBackend } from 'react-dnd-test-backend'\n\n/**\n * Wrap a Component with a DnDContext using the TestBackend\n *\n * @param DecoratedComponent The component to decorate\n * @returns [Component, getBackend] The wrapped component and a utility method\n * to get the test backend instance.\n */\nexport function wrapWithTestBackend<T>(\n\tDecoratedComponent: ComponentType<T>,\n): [ComponentType<T>, () => ITestBackend | undefined] {\n\tlet backend: ITestBackend | undefined\n\tconst opts: TestBackendOptions = {\n\t\tonCreate(be) {\n\t\t\tbackend = be\n\t\t},\n\t}\n\tconst result = wrapWithBackend(DecoratedComponent, TestBackend, opts)\n\treturn [result, () => backend]\n}\n\n/**\n * Wrap a component with a DndContext providing a backend.\n *\n * @param DecoratedComponent The compoent to decorate\n * @param Backend The backend to use (default=HTML5Backend)\n * @param backendOptions The optional backend options\n */\nexport function wrapWithBackend<T>(\n\tDecoratedComponent: ComponentType<T>,\n\tBackend: BackendFactory = HTML5Backend,\n\tbackendOptions?: unknown,\n): ComponentType<T> {\n\tclass TestContextWrapper extends Component<\n\t\tT & {\n\t\t\tforwardedRef: Ref<any>\n\t\t}\n\t> {\n\t\tpublic override render() {\n\t\t\tconst { forwardedRef, ...rest } = this.props\n\t\t\treturn (\n\t\t\t\t<DndProvider backend={Backend} options={backendOptions}>\n\t\t\t\t\t<DecoratedComponent ref={forwardedRef} {...(rest as any as T)} />\n\t\t\t\t</DndProvider>\n\t\t\t)\n\t\t}\n\t}\n\tconst ForwardedComponent = forwardRef<unknown, T>(\n\t\tfunction ForwardedTestContextWrapper(props, ref) {\n\t\t\treturn <TestContextWrapper {...props} forwardedRef={ref} />\n\t\t},\n\t)\n\treturn ForwardedComponent as unknown as ComponentType<T>\n}\n"],"names":["Component","forwardRef","DndProvider","HTML5Backend","TestBackend","wrapWithTestBackend","DecoratedComponent","backend","opts","onCreate","be","result","wrapWithBackend","Backend","backendOptions","TestContextWrapper","render","props","forwardedRef","rest","options","ref","ForwardedComponent","ForwardedTestContextWrapper"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,SAAS,EAAEC,UAAU,QAAQ,OAAO,CAAA;AAC7C,SAASC,WAAW,QAAQ,WAAW,CAAA;AACvC,SAASC,YAAY,QAAQ,yBAAyB,CAAA;AAEtD,SAASC,WAAW,QAAQ,wBAAwB,CAAA;AAEpD;;;;;;GAMG,CACH,OAAO,SAASC,mBAAmB,CAClCC,kBAAoC,EACiB;IACrD,IAAIC,OAAO,AAA0B;IACrC,MAAMC,IAAI,GAAuB;QAChCC,QAAQ,EAACC,EAAE,EAAE;YACZH,OAAO,GAAGG,EAAE;SACZ;KACD;IACD,MAAMC,MAAM,GAAGC,eAAe,CAACN,kBAAkB,EAAEF,WAAW,EAAEI,IAAI,CAAC;IACrE,OAAO;QAACG,MAAM;QAAE,IAAMJ,OAAO;KAAC,CAAA;CAC9B;AAED;;;;;;GAMG,CACH,OAAO,SAASK,eAAe,CAC9BN,kBAAoC,EACpCO,OAAuB,GAAGV,YAAY,EACtCW,cAAwB,EACL;IACnB,MAAMC,kBAAkB,SAASf,SAAS;QAKzC,AAAgBgB,MAAM,GAAG;YACxB,MAAkC,MAAU,GAAV,IAAI,CAACC,KAAK,EAAtC,EAAEC,YAAY,CAAA,EAAW,GAAG,MAAU,EAAnBC,IAAI,4BAAK,MAAU;gBAApCD,cAAY;cAAwB;YAC5C,qBACC,KAAChB,WAAW;gBAACK,OAAO,EAAEM,OAAO;gBAAEO,OAAO,EAAEN,cAAc;0BACrD,cAAA,KAACR,kBAAkB;oBAACe,GAAG,EAAEH,YAAY;mBAAOC,IAAI,EAAiB;cACpD,CACd;SACD;KACD;IACD,MAAMG,kBAAkB,iBAAGrB,UAAU,CACpC,SAASsB,2BAA2B,CAACN,KAAK,EAAEI,GAAG,EAAE;QAChD,qBAAO,KAACN,kBAAkB,oBAAKE,KAAK;YAAEC,YAAY,EAAEG,GAAG;WAAI,CAAA;KAC3D,CACD;IACD,OAAOC,kBAAkB,CAA+B;CACxD"}